name: Download Posts

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      disable_cache_check:
        description: '[Global] Disable cache check (true/false)'
        required: false
        default: false
        type: boolean
      show_debug:
        description: '[Global] Enable debug messages (true/false)'
        required: true
        default: true
        type: boolean
      post_limit:
        description: '[Reddit] Number of posts to fetch from each subreddit'
        required: false
        default: '5'
        type: string
      target_posts_coomer:
        description: '[Coomer] Number of posts to fetch per creator'
        required: false
        default: '300'
        type: string
      max_urls_coomer:
        description: '[Coomer] Maximum total URLs to download'
        required: false
        default: '250'
        type: string
      creators:
        description: '[Coomer] Comma-separated list of creators (leave empty for default)'
        required: false
        type: string
      target_posts_kemono:
        description: '[Kemono] Number of posts to fetch per creator'
        required: false
        default: '150'
        type: string
      max_urls_kemono:
        description: '[Kemono] Maximum total URLs to download'
        required: false
        default: '100'
        type: string

# Add concurrency group to prevent parallel runs
concurrency: 
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check-workflows:
    name: 🔍 Check Running Workflows
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: 🔍 Check for running workflows
        id: check
        run: |
          # Get running workflows excluding current
          RUNNING=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/runs \
            --jq '.workflow_runs[] | select(.status=="in_progress" or .status=="queued") | select(.id!=${{ github.run_id }}) | .id' \
            | wc -l)
          
          if [ "$RUNNING" -gt "0" ]; then
            echo "🔴 Found $RUNNING other running workflows - skipping"
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "🟢 No other workflows running"
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

  download-memes:
    needs: check-workflows
    if: needs.check-workflows.outputs.should_run == 'true'
    name: 🌐 Download Memes
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.collect-metadata.outputs.metadata }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt

      - name: 🧹 Remove Cache
        uses: DareFox/delete-cache-by-key@v1
        with:
          key: meme-ids-cache-
          mode: exact
        continue-on-error: true

      - name: 🚀 Restore Meme IDs Cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          path: cache/meme_ids.json
          key: meme-ids-cache-
          restore-keys: |
            meme-ids-cache-
      - name: 🔧 Install Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.PIXELDRAIN_CONF }}
          disable_base64: true
      - name: ⏬ Download Reddit Posts
        id: download-memes
        run: |
          echo "🟢 Starting Meme download process..."
          python scripts/reddit_downloader.py \
            --client-id "${{ secrets.REDDIT_CLIENT_ID }}" \
            --client-secret "${{ secrets.REDDIT_CLIENT_SECRET }}" \
            --user-agent "Average Upvote v1.0 by /u/Hyphonical" \
            --post-limit "${{ inputs.post_limit || '5' }}" \
            $([ "${{ inputs.show_debug }}" == "true" ] && echo "--debug") \
            $([ "${{ inputs.disable_cache_check }}" == "true" ] && echo "--disable-cache")
      - name: 🗂️ Collect Metadata
        id: collect-metadata
        run: |
          echo "🟢 Collecting metadata..."
          # Limit to first 250 memes to prevent matrix overflow
          limited_metadata=$(jq '.[:250]' cache/memes_metadata.json)
          metadata=$(echo "$limited_metadata" | jq -c .)
          echo "metadata=$metadata" >> $GITHUB_OUTPUT
          echo "🟢 Metadata collection complete."
      - name: 🌐 Upload Memes with Rclone
        run: |
          echo "🟢 Uploading memes to Pixeldrain with Rclone..."
          rclone copy cache Pixeldrain:"💯 Memes" --disable-http2 --multi-thread-streams 6 --transfers 8 -v
          echo "🟢 Upload complete."
      - name: 🔧 Compute Hash of Updated meme_ids.json
        id: compute-hash
        run: |
          echo "🟢 Computing hash of meme_ids.json..."
          if [ -f cache/meme_ids.json ]; then
            FILE_HASH=$(sha256sum cache/meme_ids.json | awk '{print $1}')
            echo "🟢 Computed hash: $FILE_HASH"
          else
            FILE_HASH="empty-cache"
            echo "🔴 meme_ids.json not found. Using default hash."
          fi
          echo "hash=$FILE_HASH" >> $GITHUB_ENV
      - name: 💾 Update Meme IDs Cache
        uses: actions/cache@v4
        with:
          path: cache/meme_ids.json
          key: meme-ids-cache-${{ env.hash }}

      - name: 📜 List All Files
        run: |
          echo "🟢 Listing all files in cache..."
          tree
          echo "🟢 File listing complete."
      - name: 📤 Upload Cache as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: meme-cache
          path: cache/

  download-coomer:
    needs: check-workflows
    if: needs.check-workflows.outputs.should_run == 'true'
    name: 🌐 Download Coomer
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt
      
      - name: 🧹 Remove Cache
        uses: DareFox/delete-cache-by-key@v1
        with:
          key: coomer-ids-cache-
          mode: exact
        continue-on-error: true

      - name: 🚀 Restore Coomer IDs Cache
        id: restore-coomer-cache
        uses: actions/cache@v4
        with:
          path: cache/coomer_ids.json
          key: coomer-ids-cache-
          restore-keys: |
            coomer-ids-cache-
      - name: 🔧 Install Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.PIXELDRAIN_CONF }}
          disable_base64: true
      - name: ⏬ Download Coomer Posts (Parallel)
        run: |
          python scripts/coomer_downloader.py \
            $([ "${{ inputs.show_debug }}" == "true" ] && echo "--debug") \
            $([ "${{ inputs.disable_cache_check }}" == "true" ] && echo "--disable-cache") \
            --target-posts "${{ inputs.target_posts_coomer || '50' }}" \
            --max-urls "${{ inputs.max_urls_coomer || '300' }}" \
            $([ ! -z "${{ inputs.creators }}" ] && echo "--creators '${{ inputs.creators }}'")
      - name: 🌐 Upload Coomer Posts with Rclone
        run: |
          echo "🟢 Uploading coomer posts to Pixeldrain with Rclone..."
          rclone copy cache Pixeldrain:"🌀 Onlyfans" --disable-http2 --multi-thread-streams 6 --transfers 8 -v
          echo "🟢 Upload complete."
      - name: 🔧 Compute Hash of Updated coomer_ids.json
        id: compute-hash-coomer
        run: |
          echo "🟢 Computing hash of coomer_ids.json..."
          if [ -f cache/coomer_ids.json ]; then 
            COOMER_HASH=$(sha256sum cache/coomer_ids.json | awk '{print $1}')
            echo "🟢 Computed hash: $COOMER_HASH"
          else
            COOMER_HASH="empty-cache"
            echo "🔴 coomer_ids.json not found. Using default hash."
          fi
          echo "coomer_hash=$COOMER_HASH" >> $GITHUB_ENV
      - name: 💾 Update Coomer IDs Cache
        uses: actions/cache@v4
        with:
          path: cache/coomer_ids.json
          key: coomer-ids-cache-${{ env.coomer_hash }}

      - name: 📜 List All Coomer Files
        run: |
          echo "🟢 Listing Coomer files in cache..."
          tree cache
          echo "🟢 File listing complete."
  
   download-kemono:
    needs: check-workflows
    if: needs.check-workflows.outputs.should_run == 'true
    name: 🌐 Download Kemono
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt
      
      - name: 🧹 Remove Cache
        uses: DareFox/delete-cache-by-key@v1
        with:
          key: kemono-ids-cache-
          mode: exact
        continue-on-error: true

      - name: 🚀 Restore Kemono IDs Cache
        id: restore-kemono-cache
        uses: actions/cache@v4
        with:
          path: cache/kemono_ids.json
          key: kemono-ids-cache-
          restore-keys: |
            kemono-ids-cache-
      - name: 🔧 Install Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.PIXELDRAIN_CONF }}
          disable_base64: true
      - name: ⏬ Download Kemono Posts
        env:
          KEMONO_CREATORS: ${{ secrets.CREATORS_LIST_KEMONO }}
        run: |
          python scripts/kemono_downloader.py \
            --creators "$KEMONO_CREATORS" \
            $([ "${{ inputs.show_debug }}" == "true" ] && echo "--debug") \
            $([ "${{ inputs.disable_cache_check }}" == "true" ] && echo "--disable-cache") \
            --target-posts "${{ inputs.target_posts_kemono || '50' }}" \
            --max-urls "${{ inputs.max_urls_kemono || '250' }}"
      - name: 🌐 Upload Kemono Posts with Rclone
        run: |
          echo "🟢 Uploading Kemono posts to Pixeldrain with Rclone..."
          rclone copy cache Pixeldrain:"🅿️ Patreon" --disable-http2 --multi-thread-streams 6 --transfers 16 -v
          echo "🟢 Upload complete."
      - name: 🔧 Compute Hash of Updated kemono_ids.json
        id: compute-hash-kemono
        run: |
          echo "🟢 Computing hash of kemono_ids.json..."
          if [ -f cache/coomer_ids.json ]; then 
            KEMONO_HASH=$(sha256sum cache/kemono_ids.json | awk '{print $1}')
            echo "🟢 Computed hash: $KEMONO_HASH"
          else
            KEMONO_HASH="empty-cache"
            echo "🔴 kemono_ids.json not found. Using default hash."
          fi
          echo "kemono_hash=$KEMONO_HASH" >> $GITHUB_ENV
      - name: 💾 Update Kemono IDs Cache
        uses: actions/cache@v4
        with:
          path: cache/kemono_ids.json
          key: kemono-ids-cache-${{ env.kemono_hash }}

      - name: 📜 List All Kemono Files
        run: |
          echo "🟢 Listing Kemono files in cache..."
          tree cache
          echo "🟢 File listing complete."

  send-to-telegram:
    needs: download-memes
    name: 📤 Send All Memes to Telegram
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check Out Repository
        uses: actions/checkout@v4
      - name: 📤 Download Cache Artifact
        uses: actions/download-artifact@v4
        with:
          name: meme-cache
          path: cache/
      - name: 📦 Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt
      - name: 📤 Send Memes to Telegram
        run: |
          echo "📤 Starting to send memes to Telegram..."
          python scripts/telegram_sender.py \
            --token "${{ secrets.TELEGRAM_TOKEN }}" \
            --chat-id "${{ secrets.TELEGRAM_TO }}" \
            $([ "${{ inputs.show_debug }}" == "true" ] && echo "--debug")
        continue-on-error: true

name: Download Memes From Reddit

on:
  schedule:
    - cron: '*/20 * * * *'
  workflow_dispatch:
    inputs:
      disable_cache_check:
        description: 'Disable cache check (true/false)'
        required: false
        default: false
        type: boolean
      show_debug:
        description: 'Enable debug messages (true/false)'
        required: false
        default: false
        type: boolean

jobs:
  download-memes:
    name: üåê Download Memes
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: üì¶ Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: üöÄ Restore Meme IDs Cache
        uses: actions/cache@v3
        with:
          path: cache/meme_ids.json
          key: meme-ids-cache

      # Added Step: Show meme_ids.json Before Running Python Script
      - name: üìñ Show meme_ids.json Before
        run: |
          if [ -f cache/meme_ids.json ]; then
            echo "üìÑ Contents of meme_ids.json before:"
            cat cache/meme_ids.json
          else
            echo "‚ö†Ô∏è meme_ids.json does not exist before the script runs."
          fi

      - name: üß∞ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install praw requests

      - name: üîß Install Rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: üìÇ Set Up Rclone Config
        run: |
          mkdir -p ~/.config/rclone
          echo "${{ secrets.PIXELDRAIN_CONF }}" > ~/.config/rclone/rclone.conf

      - name: ‚è¨ Download Latest Memes
        id: download-memes
        env:
          CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
          DISABLE_CACHE_CHECK: ${{ github.event.inputs.disable_cache_check }}
          SHOW_DEBUG: ${{ github.event.inputs.show_debug }}
        run: |
          mkdir -p cache
          python - <<EOF
          import os
          import json
          import requests
          import praw

          client_id = os.getenv("CLIENT_ID")
          client_secret = os.getenv("CLIENT_SECRET")
          user_agent = os.getenv("USER_AGENT")
          disable_cache_check = os.getenv("DISABLE_CACHE_CHECK", "false").lower() == "true"
          show_debug = os.getenv("SHOW_DEBUG", "false").lower() == "true"

          def debug_log(msg):
              if show_debug:
                  print(f"üõ†Ô∏è DEBUG: {msg}")

          debug_log("‚úÖ Initializing Reddit client in read-only mode...")
          reddit = praw.Reddit(
              client_id=client_id,
              client_secret=client_secret,
              user_agent=user_agent,
          )

          cache_file = "cache/meme_ids.json"
          debug_log(f"üîç Loading cached IDs from {cache_file}...")

          try:
              with open(cache_file, "r") as f:
                  cached_ids = set(json.load(f))
              debug_log(f"{len(cached_ids)} cached IDs loaded.")
          except:
              debug_log("‚ö†Ô∏è No valid cache found.")
              cached_ids = set()

          new_ids = []
          valid_exts = ['.png','.jpg','.jpeg','.webp','.gif']
          for post in reddit.subreddit("memes").new(limit=20):
              if disable_cache_check or post.id not in cached_ids:
                  try:
                      head = requests.head(post.url, allow_redirects=True, timeout=5)
                      ctype = head.headers.get("Content-Type","").lower()
                      if ctype.startswith("image/") or any(post.url.lower().endswith(e) for e in valid_exts):
                          print(f"üéâ New Meme Found: {post.title} | {post.url}")
                          data = requests.get(post.url, timeout=10).content
                          fname = os.path.join("cache", os.path.basename(post.url))
                          with open(fname, "wb") as f:
                              f.write(data)
                          new_ids.append(post.id)
                  except:
                      pass

          if new_ids:
              cached_ids.update(new_ids)
              with open(cache_file, "w") as f:
                  json.dump(sorted(cached_ids), f)
              print(f"üéâ Downloaded {len(new_ids)} new memes.")
          else:
              print("‚ú® No New Memes Found!")
          EOF

      # Added Step: Show meme_ids.json After Running Python Script
      - name: üìñ Show meme_ids.json After
        run: |
          if [ -f cache/meme_ids.json ]; then
            echo "üìÑ Contents of meme_ids.json after:"
            cat cache/meme_ids.json
          else
            echo "‚ö†Ô∏è meme_ids.json does not exist after the script runs."
          fi

      - name: üìú List All Files
        run: tree

      - name: üåê Upload Memes with Rclone
        run: |
          rclone copy cache Pixeldrain:"üíØ Memes"

      # 3) Save images as usual
      - name: üõ†Ô∏è Save Artifacts (Images)
        if: steps.download-memes.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: memes
          path: |
            cache/*.jpg
            cache/*.jpeg
            cache/*.png
            cache/*.webp
            cache/*.gif

      - name: üíæ Update Meme IDs Cache
        if: always()
        uses: actions/cache@v3
        with:
          path: cache/meme_ids.json
          key: meme-ids-cache
